<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/ci-cd.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/ci-cd.yml" />
              <option name="originalContent" value="name: CI/CD for Quick-Errands Microservices&#10;&#10;on:&#10;  push:&#10;    branches: [ main ]&#10;  pull_request:&#10;    branches: [ main ]&#10;&#10;jobs:&#10;  build-and-push:&#10;    runs-on: ubuntu-latest&#10;    services:&#10;      postgres:&#10;        image: postgres:15&#10;        env:&#10;          POSTGRES_USER: postgres&#10;          POSTGRES_PASSWORD: Manyika12!&#10;        ports:&#10;          - 5432:5432&#10;      mongo:&#10;        image: mongo:6.0&#10;        env:&#10;          MONGO_INITDB_ROOT_USERNAME: mongo&#10;          MONGO_INITDB_ROOT_PASSWORD: Manyika12!&#10;        ports:&#10;          - 27017:27017&#10;&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v3&#10;&#10;      - name: Set up JDK 21&#10;        uses: actions/setup-java@v3&#10;        with:&#10;          distribution: temurin&#10;          java-version: 21&#10;&#10;      - name: Log in to Docker Hub&#10;        uses: docker/login-action@v2&#10;        with:&#10;          username: ${{ secrets.DOCKER_HUB_USERNAME }}&#10;          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}&#10;&#10;      #  Added Step&#10;      - name: Build and install local Maven modules&#10;        run: mvn clean install -DskipTests&#10;&#10;      - name: Run Liquibase migrations for PostgreSQL services&#10;        env:&#10;          LIQUIBASE_URL: ${{ secrets.DB_URL }}&#10;          LIQUIBASE_USERNAME: ${{ secrets.DB_USER }}&#10;          LIQUIBASE_PASSWORD: ${{ secrets.DB_PASS }}&#10;        run: |&#10;          postgres_services=(&quot;auth-service&quot; &quot;errand-service&quot; &quot;assignment-service&quot;)&#10;          for service in &quot;${postgres_services[@]}&quot;; do&#10;            echo &quot;Running Liquibase migrations for $service (PostgreSQL)...&quot;&#10;            mvn -pl $service liquibase:update \&#10;              -Dliquibase.url=$LIQUIBASE_URL \&#10;              -Dliquibase.username=$LIQUIBASE_USERNAME \&#10;              -Dliquibase.password=$LIQUIBASE_PASSWORD \&#10;              -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml&#10;            echo &quot;Done: $service (PostgreSQL)&quot;&#10;            echo &quot;----------------------------------------------------&quot;&#10;          done&#10;      &#10;&#10;      - name: Run Liquibase migrations for MongoDB tracking-service&#10;        env:&#10;          MONGO_URL: ${{ secrets.MONGO_URL }}&#10;          MONGO_DB: ${{ secrets.MONGO_DB }}&#10;        run: |&#10;          echo &quot;Running Liquibase for tracking-service (MongoDB)...&quot;&#10;          mvn -pl tracking-service liquibase:update \&#10;            -Dliquibase.command.url=$MONGO_URL \&#10;            -Dliquibase.command.mongodbDatabase=$MONGO_DB&#10;          echo &quot;Done: tracking-service (MongoDB)&quot;&#10;      &#10;&#10;      - name: Build and push Docker images for microservices&#10;        run: |&#10;          services=(&quot;auth-service&quot; &quot;api-gateway&quot; &quot;config-server&quot; &quot;discovery-service&quot; &quot;errand-service&quot; &quot;tracking-service&quot; &quot;assignment-service&quot;)&#10;          for service in &quot;${services[@]}&quot;; do&#10;            echo &quot;Building image for $service...&quot;&#10;            docker build -t sangurakoded/$service:latest -f $service/Dockerfile .&#10;            docker tag sangurakoded/$service:latest sangurakoded/$service:${{ github.sha }}&#10;            docker push sangurakoded/$service:latest&#10;            docker push sangurakoded/$service:${{ github.sha }}&#10;            echo &quot;Done building and pushing $service&quot;&#10;            echo &quot;----------------------------------------------------&quot;&#10;          done&#10;&#10;      - name: Clean up Docker images&#10;        if: always()&#10;        run: docker system prune -af&#10;" />
              <option name="updatedContent" value="name: CI/CD for Quick-Errands Microservices&#10;&#10;on:&#10;  push:&#10;    branches: [ main ]&#10;  pull_request:&#10;    branches: [ main ]&#10;&#10;jobs:&#10;  build-and-push:&#10;    runs-on: ubuntu-latest&#10;    services:&#10;      postgres:&#10;        image: postgres:15&#10;        env:&#10;          POSTGRES_USER: postgres&#10;          POSTGRES_PASSWORD: Manyika12!&#10;        ports:&#10;          - 5432:5432&#10;      mongo:&#10;        image: mongo:6.0&#10;        env:&#10;          MONGO_INITDB_ROOT_USERNAME: mongo&#10;          MONGO_INITDB_ROOT_PASSWORD: Manyika12!&#10;        ports:&#10;          - 27017:27017&#10;&#10;    steps:&#10;      - name: Checkout repository&#10;        uses: actions/checkout@v3&#10;&#10;      - name: Set up JDK 21&#10;        uses: actions/setup-java@v3&#10;        with:&#10;          distribution: temurin&#10;          java-version: 21&#10;&#10;      - name: Log in to Docker Hub&#10;        uses: docker/login-action@v2&#10;        with:&#10;          username: ${{ secrets.DOCKER_HUB_USERNAME }}&#10;          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}&#10;&#10;      #  Added Step&#10;      - name: Build and install local Maven modules&#10;        run: mvn clean install -DskipTests&#10;&#10;      - name: Run Liquibase migrations for PostgreSQL services&#10;        env:&#10;          LIQUIBASE_URL: ${{ secrets.DB_URL }}&#10;          LIQUIBASE_USERNAME: ${{ secrets.DB_USER }}&#10;          LIQUIBASE_PASSWORD: ${{ secrets.DB_PASS }}&#10;        run: |&#10;          postgres_services=(&quot;auth-service&quot; &quot;errand-service&quot; &quot;assignment-service&quot;)&#10;          for service in &quot;${postgres_services[@]}&quot;; do&#10;            echo &quot;Running Liquibase migrations for $service (PostgreSQL)...&quot;&#10;            mvn -pl $service liquibase:update \&#10;              -Dliquibase.url=$LIQUIBASE_URL \&#10;              -Dliquibase.username=$LIQUIBASE_USERNAME \&#10;              -Dliquibase.password=$LIQUIBASE_PASSWORD \&#10;              -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.xml&#10;            echo &quot;Done: $service (PostgreSQL)&quot;&#10;            echo &quot;----------------------------------------------------&quot;&#10;          done&#10;      &#10;&#10;      - name: Run Liquibase migrations for MongoDB tracking-service&#10;        env:&#10;          MONGO_URL: ${{ secrets.MONGO_URL }}&#10;          MONGO_DB: ${{ secrets.MONGO_DB }}&#10;        run: |&#10;          echo &quot;Running Liquibase for tracking-service (MongoDB)...&quot;&#10;          mvn -pl tracking-service liquibase:update \&#10;            -Dliquibase.command.url=$MONGO_URL \&#10;            -Dliquibase.command.mongodbDatabase=$MONGO_DB&#10;          echo &quot;Done: tracking-service (MongoDB)&quot;&#10;      &#10;&#10;      - name: Build and push Docker images for microservices&#10;        run: |&#10;          services=(&quot;auth-service&quot; &quot;api-gateway&quot; &quot;config-server&quot; &quot;discovery-service&quot; &quot;errand-service&quot; &quot;tracking-service&quot; &quot;assignment-service&quot;)&#10;          for service in &quot;${services[@]}&quot;; do&#10;            echo &quot;Building image for $service...&quot;&#10;            docker build -t sangurakoded/$service:latest -f $service/Dockerfile .&#10;            docker tag sangurakoded/$service:latest sangurakoded/$service:${{ github.sha }}&#10;            docker push sangurakoded/$service:latest&#10;            docker push sangurakoded/$service:${{ github.sha }}&#10;            echo &quot;Done building and pushing $service&quot;&#10;            echo &quot;----------------------------------------------------&quot;&#10;          done&#10;&#10;      - name: Clean up Docker images&#10;        if: always()&#10;        run: docker system prune -af" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>