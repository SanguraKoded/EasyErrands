events {}

http {
    # 1. Upstream block (load balancing backend servers)
    upstream gateway {
        server api-gateway:8085;   # API Gateway container
        # Add more servers here if you scale:
        # server api-gateway1:8085;
        # server api-gateway2:8085;
    }

    # 2. Redirect HTTP -> HTTPS (force secure connections)
    server {
        listen 80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }

    # 3. HTTPS server
    server {
        listen 443 ssl;
        server_name localhost;

        #  SSL Certificates
        ssl_certificate     /etc/nginx/certs/server.crt;
        ssl_certificate_key /etc/nginx/certs/server.key;

        #  Stronger SSL protocols & ciphers
        ssl_protocols TLSv1.2 TLSv1.3;           # Only allow modern secure protocols
        ssl_prefer_server_ciphers on;            # Use server-preferred ciphers
        ssl_ciphers HIGH:!aNULL:!MD5;            # Disable weak ciphers

        #  Security Headers
        add_header X-Frame-Options "DENY";       # Prevent clickjacking
        add_header X-Content-Type-Options "nosniff"; # Prevent MIME sniffing
        add_header X-XSS-Protection "1; mode=block"; # Basic XSS protection
        add_header Referrer-Policy "no-referrer-when-downgrade"; # Control referrer info
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        # Force browsers to use HTTPS for 1 year

        #  Gzip Compression
        gzip on;                                 # Enable gzip
        gzip_types text/plain text/css application/json application/javascript application/xml;
        gzip_min_length 256;                     # Donâ€™t compress tiny responses

        #  Client Request Limits
        client_max_body_size 10M;                # Prevent huge uploads
        client_body_timeout 12;                  # Timeout if client stalls

        #  Proxy Timeouts (protect backend)
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        #  Rate Limiting (basic anti-abuse)
        limit_req_zone $binary_remote_addr zone=mylimit:10m rate=5r/s;
        # 5 requests per second per IP

        location / {
            # Apply rate limiting
            limit_req zone=mylimit burst=10 nodelay;

            # Forward requests to backend
            proxy_pass http://gateway;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }
}
