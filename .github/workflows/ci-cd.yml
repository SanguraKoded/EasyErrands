name: CI/CD for Quick-Errands Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # ðŸ‘‡ Added Step
      - name: Build and install local Maven modules
        run: mvn clean install -DskipTests

      - name: Run Liquibase migrations for PostgreSQL services
        run: |
          postgres_services=("auth-service" "errand-service" "assignment-service")
          for service in "${postgres_services[@]}"; do
            echo "Running Liquibase migrations for $service (PostgreSQL)..."
            mvn -pl $service liquibase:update \
              -Dliquibase.url=${{ secrets.DB_URL }} \
              -Dliquibase.username=${{ secrets.DB_USER }} \
              -Dliquibase.password=${{ secrets.DB_PASS }}
            echo "Done: $service (PostgreSQL)"
            echo "----------------------------------------------------"
          done
      

      - name: Run Liquibase migrations for MongoDB tracking-service
        run: |
          echo "Running Liquibase for tracking-service (MongoDB)..."
          mvn -pl tracking-service liquibase:update \
            -Dliquibase.command.url=${{ secrets.MONGO_URL }} \
            -Dliquibase.command.mongodbDatabase=${{ secrets.MONGO_DB }}
          echo "Done: tracking-service (MongoDB)"

      - name: Build and push Docker images for microservices
        run: |
          services=("auth-service" "api-gateway" "config-server" "discovery-service" "errand-service" "tracking-service" "assignment-service")
          for service in "${services[@]}"; do
            echo "Building image for $service..."
            docker build -t sangurakoded/$service:latest -f $service/Dockerfile .
            docker tag sangurakoded/$service:latest sangurakoded/$service:${{ github.sha }}
            docker push sangurakoded/$service:latest
            docker push sangurakoded/$service:${{ github.sha }}
            echo "Done building and pushing $service"
            echo "----------------------------------------------------"
          done

      - name: Clean up Docker images
        if: always()
        run: docker system prune -af
