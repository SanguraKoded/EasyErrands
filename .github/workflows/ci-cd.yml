name: CI/CD for Easy-Errands Microservices

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Manyika12!
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      mongo:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: mongo
          MONGO_INITDB_ROOT_PASSWORD: Manyika12!
        ports:
          - 27017:27017

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and install local Maven modules
        run: mvn clean install -DskipTests

      - name: Wait for Postgres to be ready
        run: |
          echo "Waiting for Postgres to start..."
          for i in {1..20}; do
            if docker exec $(docker ps -qf "ancestor=postgres:15") pg_isready -U postgres; then
              echo "Postgres is ready!"
              break
            fi
            echo "Still waiting..."
            sleep 3
          done

      - name: Create service databases
        run: |
          echo "Creating databases..."
          docker exec $(docker ps -qf "ancestor=postgres:15") psql -U postgres -c "CREATE DATABASE auth_service_db;"
          docker exec $(docker ps -qf "ancestor=postgres:15") psql -U postgres -c "CREATE DATABASE errand_service_db;"
          docker exec $(docker ps -qf "ancestor=postgres:15") psql -U postgres -c "CREATE DATABASE assignment_service_db;"
          echo "Databases created."

      - name: Run Liquibase migrations for PostgreSQL services
        env:
          LIQUIBASE_USERNAME: ${{ secrets.DB_USER }}
          LIQUIBASE_PASSWORD: ${{ secrets.DB_PASS }}
        run: |
          postgres_services=("auth-service" "errand-service" "assignment-service")
          for service in "${postgres_services[@]}"; do
            db_name="${service//-/_}_db"
            db_url="jdbc:postgresql://localhost:5432/${db_name}"

            echo "Clearing Liquibase checksums for $service..."
            mvn -pl $service liquibase:clearCheckSums \
              -Dliquibase.url=$db_url \
              -Dliquibase.username=$LIQUIBASE_USERNAME \
              -Dliquibase.password=$LIQUIBASE_PASSWORD \
              -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml

            echo "Running Liquibase migrations for $service..."
            mvn -pl $service liquibase:update \
              -Dliquibase.url=$db_url \
              -Dliquibase.username=$LIQUIBASE_USERNAME \
              -Dliquibase.password=$LIQUIBASE_PASSWORD \
              -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml

            echo "✅ Done: $service"
            echo "----------------------------------------------------"
          done

      - name: Run Liquibase migrations for MongoDB tracking-service
        env:
          MONGO_URL: ${{ secrets.MONGO_URL }}
          MONGO_DB: ${{ secrets.MONGO_DB }}
        run: |
          echo "Running Liquibase for tracking-service (MongoDB)..."
          mvn -pl tracking-service liquibase:update \
            -Dliquibase.url=$MONGO_URL \
            -Dliquibase.changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml

  echo "✅ Done: tracking-service (MongoDB)"

      - name: Build and push Docker images for microservices
        run: |
          services=("auth-service" "api-gateway" "config-server" "discovery-service" "errand-service" "tracking-service" "assignment-service")
          for service in "${services[@]}"; do
            echo "Building image for $service..."
            docker build -t sangurakoded/$service:latest -f $service/Dockerfile .
            docker tag sangurakoded/$service:latest sangurakoded/$service:${{ github.sha }}
            docker push sangurakoded/$service:latest
            docker push sangurakoded/$service:${{ github.sha }}
            echo "✅ Done building and pushing $service"
            echo "----------------------------------------------------"
          done

      - name: Clean up Docker images
        if: always()
        run: docker system prune -af
