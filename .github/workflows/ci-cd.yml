name: CI/CD Pipeline for Errand Service

# Trigger this workflow on push to main branch or pull request to main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest   # Use the latest Ubuntu runner

    # Environment variables for Docker image
    env:
      DOCKER_IMAGE: sangurakoded/errand-service  # Your Docker Hub username + repo
      DOCKER_TAG: ${{ github.sha }}              # Tag the image with the commit SHA

    steps:

      # --------------------------
      # Step 0: Verify Docker secrets exist
      # --------------------------
      - name: Check Docker secrets
        run: |
          if [[ -z "${{ secrets.DOCKER_HUB_USERNAME }}" || -z "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" ]]; then
            echo "ERROR: Docker Hub secrets are missing! Please add DOCKER_HUB_USERNAME and DOCKER_HUB_ACCESS_TOKEN in Actions secrets."
            exit 1
          fi

      # --------------------------
      # Step 1: Checkout repository
      # --------------------------
      - name: Checkout code
        uses: actions/checkout@v3

      # --------------------------
      # Step 2: Set up Java (JDK 21)
      # --------------------------
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 21

      # --------------------------
      # Step 3: Build the project with Maven
      # --------------------------
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # --------------------------
      # Step 4: Log in to Docker Hub
      # --------------------------
      # Uses the docker/login-action to authenticate using GitHub Secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # --------------------------
      # Step 5: Build Docker image
      # --------------------------
      # Uses environment variables for image name and tag
      - name: Build Docker image
        run: docker build -t $DOCKER_IMAGE:$DOCKER_TAG .

      # --------------------------
      # Step 6: Push Docker image to Docker Hub
      # --------------------------
      - name: Push Docker image
        run: docker push $DOCKER_IMAGE:$DOCKER_TAG

      # --------------------------
      # Step 7: Optional 'latest' tag
      # --------------------------
      # Tag the same image as 'latest' and push to Docker Hub
      - name: Push 'latest' tag
        run: |
          docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:latest
